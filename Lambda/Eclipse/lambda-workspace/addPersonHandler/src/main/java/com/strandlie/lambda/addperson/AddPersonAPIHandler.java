package com.strandlie.lambda.addperson;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

public class AddPersonAPIHandler implements RequestHandler<PersonRequest, PersonResponse> {
	
	private PreparedStatement statement;

    @Override
    public PersonResponse handleRequest(PersonRequest request, Context context) {
        context.getLogger().log("Received request: \n" + request.toString() + "\n");

		PersonResponse response = new PersonResponse(false);
		
		String firstName = request.getFirstName();
		String lastName = request.getLastName();
		String email = request.getEmail();
		String phoneNr = request.getPhoneNr();
		String pictureURL = request.getPictureURL();
		
		try {
			int id = createInDatabase(firstName, lastName, email, phoneNr, pictureURL);
			response.setId(id);
			response.setPersonIsAdded(true);
			}
		catch (SQLException e) {
			response.setErrorMessage(e.toString());
			context.getLogger().log("Database error: " + e.toString());
			// Using RuntimeException to be able to return the error through the API
			throw new RuntimeException("Database error. Could not add the person to the database. Error message: \n" + e.toString());
		}
		context.getLogger().log("\nRequest successfully processed\n");
		
		return response;
    }
    
	
	private int createInDatabase(String firstName, String lastName, String email, String phoneNr, String pictureURL) throws SQLException  {
		
		String sql = "INSERT INTO person (firstName, lastName, email, phoneNr, pictureURL)" +
					  "VALUES(?, ?, ?, ?, ?)";
		Connection connection = DriverManager.getConnection("jdbc:mysql://" + 
					  			System.getenv("DBUsername") + ":" + 
					  			System.getenv("DBPassword") + 
					  			"@" + System.getenv("DBPath"));
		connection.setCatalog(System.getenv("DBDatabase"));

		statement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
		setStringOrNull(1, firstName);
		setStringOrNull(2, lastName);
		setStringOrNull(3, email);
		setStringOrNull(4, phoneNr);
		setStringOrNull(5, pictureURL);
		statement.executeUpdate();
		
		// Gets the key generated by the DB for the object inserted
		ResultSet generatedKeys =  statement.getGeneratedKeys();
		
		if (generatedKeys.next()) {
			int id = generatedKeys.getInt(1);
			connection.close();
			return id;
		}
		connection.close();
		return -1;
	}
	
	private void setStringOrNull(int parameterIndex, String string) throws SQLException {
		if (string.toUpperCase().equals("NULL")) {
			statement.setNull(parameterIndex, Types.VARCHAR);
		}
		else {
			statement.setString(parameterIndex, string);
		}
	}

}

package com.strandlie.lambda.item;

import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.amazonaws.services.lambda.runtime.Context;

import common.APIHandler;
import common.APIRequest;
import common.APIResponse;
import exceptions.DatabaseErrorException;
import exceptions.InvalidCreateItemRequestFormatException;

public class AddItemAPIHandler extends APIHandler {

	private ItemRequest request;

	@Override
	public APIResponse handleRequest(APIRequest request, Context context) {
        context.getLogger().log("Received create request with values: \n " + request.toString() + "\n");
        
        this.request = APIRequestIsItemRequest(request);
		ItemResponse response = new ItemResponse();
		response.setItemIsAdded(false);
		
		String title = this.request.getTitle();
		if (title == null) {
			throw new InvalidCreateItemRequestFormatException("title");
		}
		String description = this.request.getDescription();
		String pictureURL = this.request.getPictureURL();
		String websiteURL = this.request.getWebsiteURL();
		Double price = this.request.getPrice();
		
		try {
			int id = createInDatabase(title, description, pictureURL, websiteURL, price);
			response.setId(id);
			response.setItemIsAdded(true);
		}
		catch (SQLException e) {
			response.setErrorMessage(e.toString());
			context.getLogger().log("Database error: " + e.toString());
			throw new DatabaseErrorException("Could not add the item to the database", e.toString());
		} finally {
			closeDatabaseConnection();
		}
		context.getLogger().log("\nCreate request successfully processed\n");
		
		return response;
	}
	
	private int createInDatabase(String title, String description, String pictureURL, String websiteURL, Double price) throws SQLException  {
		
		String sql = "INSERT INTO item(title, description, pictureURL, websiteURL, price)" +
					  "VALUES(?, ?, ?, ?, ?)";

		getConnection();
		
		statement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
		setStringOrNull(1, title);
		setStringOrNull(2, description);
		setStringOrNull(3, pictureURL);
		setStringOrNull(4, websiteURL);
		setDoubleOrNull(5, price);
		statement.executeUpdate();
		
		// Gets the key generated by the DB for the object inserted
		resultSet =  statement.getGeneratedKeys();
		
		if (resultSet.next()) {
			int id = resultSet.getInt(1);
			return id;
		}
		return -1;
	}
	
	private ItemRequest APIRequestIsItemRequest(APIRequest request) {
		try {
			ItemRequest r = (ItemRequest) request;
			return r;
		}
		catch (ClassCastException e) {
			throw new RuntimeException("API Request: " + request.toString() + " is not" + 
			" an ItemRequest.");
		}
	}

}
